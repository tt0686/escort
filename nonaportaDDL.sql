--CREATE DATABASE 
-- Entity Relationship Model 
-- http://fabforce.eu/dbdesigner4/doc/
-- https://medium.com/omarelgabrys-blog/database-modeling-entity-relationship-diagram-part-5-352c5a8859e5
-- Inheritance strategies to implement on a relational model SINGLE_TABLE, TABLE_PER_CLASS and JOINED.
-- MYSQL DOES NOT HAVE TWO CONCEPTS REGARDING SCHEMA AND DATABASE LIKE ORACLE HAS 
CREATE DATABASE IF NOT EXISTS NONAPORTA; 

--STATIC TABLES ID SHOULD BE OF SMALLINT DATATYPE
-- THE TOKENS WILL CONTAIN 3 CHAR TO IDENTIFY THE TABLE
-- 6 CHAR TO IDENTIFY THE DATA ITSELF
CREATE TABLE IF NOT EXISTS NONAPORTA.STATIC_DATA_GENDER(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
TOKEN CHAR(9) NOT NULL UNIQUE,
DESCRIPTION VARCHAR(20),
INDEX (TOKEN)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.STATIC_DATA_PROFESSION(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
TOKEN CHAR(9) NOT NULL UNIQUE,
DESCRIPTION VARCHAR(20),
INDEX (TOKEN)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.MESSAGE_RESOURCES(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
LANGUAGE CHAR(2),
TOKEN VARCHAR(50)
MESSAGE TEXT,
INDEX (TOKEN)
);

--USER
--USER_FACEBOOK
--USER_TWITTER
--MODEL
--MODEL_FACEBOOK
--MODEL TWITTER
CREATE TABLE IF NOT EXISTS NONAPORTA.ROLES(
ID TINYINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
TOKEN CHAR(10),
DESCRIPTION VARCHAR(20),
INDEX (TOKEN)
);

-- This Themes are related with Filters and Effects that we can apply
-- to Photos
CREATE TABLE IF NOT EXISTS NONAPORTA.THEMES(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
THEME_NAME VARCHAR(50) NOT NULL
);

--The available Services that we can choose in the application
-- It will include all the Services applied to the different Roles
CREATE TABLE IF NOT EXISTS NONAPORTA.SERVICES(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
DESCRIPTION VARCHAR(50) NOT NULL,
ACTIVE BIT NOT NULL
);

--Services History
-- The ID will be the ID Services table
CREATE TABLE IF NOT EXISTS NONAPORTA.SERVICES_HISTORY(
ID SMALLINT UNSIGNED NOT NULL,
INIT_DATE DATETIME NOT NULL,
END_DATE DATETIME
);

-- What Services apply to the different Roles
CREATE TABLE IF NOT EXISTS NONAPORTA.SERVICES_ROLES(
SERVICE_ID SMALLINT UNSIGNED NOT NULL,
ROLE_ID TINYINT NOT NULL,
FOREIGN KEY(SERVICE_ID) REFERENCES NONAPORTA.SERVICES(ID),
FOREIGN KEY(ROLE_ID) REFERENCES NONAPORTA.ROLES(ID)
);

--------------------------------------------------------------------THE HISTORY TABLES
--------------------------------------------------------------------EVERYTIME AN ITEM IS INSERTED ON AN TABLE THAT HAS AN HISTORY TABLE
--------------------------------------------------------------------THE SAME REGISTRY IS INSERTED ON THE RESPECTIVE HISTORY TABLE WITH THE END DATE AT NULL!!!
--------------------------------------------------------------------THROUGH THE EXECUTION PLAN WE COMFIRM THAT AN TABLE WITH THE ACTIVE BIT IS MORE PERFORMANTE REGARDING TWO TABLE 

-- What Services each User has
CREATE TABLE IF NOT EXISTS NONAPORTA.USERS_SERVICES(
USER_ID INT UNSIGNED,
SERVICE_ID SMALLINT UNSIGNED,
FOREIGN KEY(USER_ID) REFERENCES NONAPORTA.USERS_LOGIN(ID),
FOREIGN KEY(SERVICE_ID) REFERENCES NONAPORTA.SERVICES(ID),
PRIMARY KEY(USER_ID,SERVICE_ID)
);

-- All the Services each User has in the past
CREATE TABLE IF NOT EXISTS NONAPORTA.USERS_SERVICES_HISTORY(
USER_ID INT UNSIGNED,
SERVICE_ID SMALLINT UNSIGNED,
REGISTER_DATE DATETIME NOT NULL,
QUITTING_DATE DATETIME,
FOREIGN KEY(USER_ID) REFERENCES NONAPORTA.USERS_LOGIN(ID),
FOREIGN KEY(SERVICE_ID) REFERENCES NONAPORTA.SERVICES(ID)
);


--Services prices
CREATE TABLE IF NOT EXIST NONAPORTA.SERVICES_PRICE(
SERVICE_ID SMALLINT UNSIGNED,
PRICE DECIMAL(8,2) NOT NULL, 
FOREIGN KEY(SERVICE_ID) REFERENCES NONAPORTA.SERVICES(ID)
);

-- History Services prices
CREATE TABLE IF NOT EXIST NONAPORTA.SERVICES_PRICE_HISTORY(
SERVICE_ID SMALLINT UNSIGNED,
PRICE DECIMAL(8,2) NOT NULL,
FROM DATETIME NOT NULL,
TO DATETIME,
FOREIGN KEY(SERVICE_ID) REFERENCES NONAPORTA.SERVICES(ID),
PRIMARY KEY(SERVICE_ID,PRICE)
);


--DISCOUNTS
-- RULES : IF A MODEL SUBSCRIBE FOR AN YEAR HAS 

--User Tables 
--CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), species VARCHAR(20), sex CHAR(1), birth DATE, death DATE); 
--HOW STORE PASSWORDS USERS ? 
-- USE HASH ALGORITHM SHA-256 , ALL THE HASHES HAS THE SAME LENGHT 
-- TWO EQUALS PASSWORDS GENERATE THE SAME HASH SO THE CROOKERS CAN GENERATE RAINBOWS TABLES TO MATCH 
-- USE SALT -> SO WE ARE PREVENTING TWO EQUAL PASSWORDS TO HAVE THE SAME HASH AND TO PREVENT RAINBOWS TABLES ATTACK !!! 
-- BUT WHERE DO WE STORE THE SALT , IF AN ATTACKER HAS ACCESS TO THE DATABASE HW WILL HAS ACCESS TO SALT 
-- THE RAINBOWS TABLES ARE CREATED IN THE ADVANCE AND DISTRIBUTED EN MASS TO SAVE CALCULATIONS FOR OTHERS SO HAVING ACCESS TO THE SALT 
-- http://www.appsdeveloperblog.com/encrypt-user-password-example-java/ 
-- https://security.stackexchange.com/questions/11221/how-big-should-salt-be 
-- https://howtodoinjava.com/security/how-to-generate-secure-password-hash-md5-sha-pbkdf2-bcrypt-examples/ 
-- https://blogs.msdn.microsoft.com/tzink/2012/08/29/how-rainbow-tables-work/ 
-- INSTEAD OF USING AN CRYPTOGRAPHICALLY SECURE HASH FUNCTION (SHA) WE WILL USE AN PASSWORD BASED KEY DERIVATION FUNCTION 
-- THIS FUNCTION WILL BE SLOW ENOUGH TO IMPEDE THE ATTACK BUT STILL FAST ENOUGH TO NOT CAUSE A NOTICEABLE DELAY FOR THE USE. 
-- THESE ALGORITHMS TAKE A WORK FACTOR (ALSO KNOWN AS SECURITY FACTOR) OR ITERATION COUNT AS AN ARGUMENT. THIS VALUE DETERMINES HOW SLOW THE HASH FUNCTION WILL BE. 
-- WHEN COMPUTERS BECOME FASTER NEXT YEAR WE CAN INCREASE THE WORK FACTOR TO BALANCE IT OUT. 
-- WE GONNA USE THE org.springframework.security.crypto.bcrypt.BCrypt CLASS TO GENERATE THE HASH AND THE SALT AND TO COMPARE PASSWORDS 
-- THE BCRYPT HASHES FOLLOW A STRUCTURE REFERRED TO AS A MODULAR CRYPT FORMAT(MCF)
-- $<id>$<cost>$<salt><digest>
-- VARCHAR IS VARIABLE LENGHT / CHAR IS FIXED LENGHT
-- THEY ALSO DIFFER IN MAXIMUM LENGTH AND IN WHETHER TRAILING SPACES ARE RETAINED !!!
-- 
-- CHAR(60) || BINARY || BINARY(60) 
-- WE GONNA USE TWO FACTOR AUTHENTICATION THROUGH TWILIO API(SMS API)
-- The users will have the chance to authenticate through Facebook or Gmail , we will use the OAuth protocol for that purpose.
--  It uses username and password tokens instead 
-- OAuth 2.0 is a simple protocol that allows to access resources of the user without sharing passwords.
-- developers.facebook.com
-- http://javapapers.com/java/java-facebook-login-with-oauth-authentication/
-- https://developers.facebook.com/docs/facebook-login/web
-- https://spring.io/guides/gs/accessing-facebook/
-- http://restfb.com/
-- http://www.baeldung.com/facebook-authentication-with-spring-security-and-social
-- Should we use CDN https://www.cloudflare.com/learning/cdn/what-is-a-cdn/ ?
CREATE TABLE IF NOT EXISTS NONAPORTA.USERS_LOGIN ( 
        ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT, 
        LOGIN_NAME VARCHAR NOT NULL , 
        PASSWORD BINARY(60) NOT NULL ,
		LAST_LOGIN DATETIME NOT NULL,
		ROLE TINYINT NOT NULL,
		EXTERNAL_ID BIGINT,
		PHONE_NUMER CHAR(10), 
		DOUBLE_FACT_AUTH CHAR(1) NOT NULL,
		FOREIGN KEY(ROLE) REFERENCES NONAPORTA.ROLES(ID)
); 

-- Date parts must always be given in year-month-day order!!!
CREATE TABLE IF NOT EXISTS NONAPORTA.USERS_INFORMATION( 
ID INT UNSIGNED PRIMARY KEY,
FIRST_NAME VARCHAR(20) NOT NULL, 
LAST_NAME VARCHAR(20) NOT NULL, 
MAIL NOT NULL VARCHAR(255), 
REGISTER_DATE DATETIME NOT NULL, 
GENDER SMALLINT NOT NULL, 
PHOTO , 
PROFESSION SMALLINT,
ACTIVE CHAR(1),
FOREIGN KEY (ID) REFERENCES NONAPORTA.USERS_LOGIN(ID),
FOREIGN KEY (PROFESSION) REFERENCES NONAPORTA.STATIC_DATA_PROFESSION(ID),
FOREIGN KEY (GENDER) REFERENCES NONAPORTA.STATIC_DATA_GENDER(ID)
);


-- We will use GOOGLE MAPS API to mark the map with the models location
-- We load the map with all know models locations and the calculations are made in real time in the client side
-- through Google Maps Javascript API.
-- We will also use the Google Maps Geocoding API to get the geographic coordinates from address and store them 
-- in the database
-- https://developers.google.com/maps/documentation/javascript/mysql-to-maps#createtable
-- https://stackoverflow.com/questions/32284708/how-to-constantly-detect-nearby-marker-locations-from-current-location-in-google
-- https://github.com/googlemaps/google-maps-services-java/tree/master/src/main/java/com/google/maps
-- https://developers.google.com/maps/faq#geocoder_queryformat
-- https://developers.google.com/maps/documentation/javascript/tutorial

CREATE TABLE IF NOT EXISTS NONAPORTA.MODELS_INFORMATION(
ID INT UNSIGNED PRIMARY KEY,
ADDRESS VARCHAR(255),
LAT FLOAT( 10, 6 ) ,
LNG FLOAT( 10, 6 ) ,
FOREIGN KEY(ID) REFERENCES NONAPORTA.USERS_INFORMATION(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.FEE(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
FEE DECIMAL(8,2) NOT NULL,
ACTIVE BIT NOT NULL
);

CREATE TABLE IF NOT EXISTS NONAPORTA.FEE_HISTORY(
FEE_ID SMALLINT UNSIGNED,
FROM DATETIME NOT NULL,
TO DATETIME,
FOREIGN KEY(FEE_ID) REFERENCES NONAPORTA.FEE(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.FEE_DISCOUNTS(
ID SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
ID_ROLE TINYINT UNSIGNED NOT NULL,
DISCOUNT DECIMAL(3,2) NOT NULL,
NAME VARCHAR(30) NOT NULL,
ACTIVE BIT NOT NULL,
FOREIGN KEY(ID_ROLE) REFERENCES NONAPORTA.ROLES(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.FEE_DISCOUNTS_HISTORY(
ID SMALLINT UNSIGNED PRIMARY KEY,
FROM  DATETIME NOT NULL,
TO DATETIME,
FOREIGN KEY(ID) REFERENCES NONAPORTA.FEE_DISCOUNTS(ID)
);

-- VERY IMPORTANT
-- SO THE TOTAL WILL BE THE ((FEE * DURATION) - FEE_DISCOUNT) + SERVICES_SUBSCRIBED
-- ONE USER CAN HAVE MORE THAN ONE ACTIVE PAYMENT !!!
-- FIRST IT CAN PAY FOR JUST THE FEE AND LATER PAY FOR THE SERVICE
-- THIS TABLE REPRESENT THE  ACTIVE PAYMENTS !!!!EVERYTIME AN PAYMENT EXPIRES THHROUGH THE 'DURATION' EXPIRATION IS COPIED TO THE
-- PAST_PAYMENTS TABLE AND DELETED FROM THIS TABLE
CREATE TABLE IF NOT EXISTS NONAPORTA.PAYMENTS(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
PAYMENT_DATE DATETIME NOT NULL,
USER_ID INT NOT NULL,
FEE_ID SMALLINT,
FEE_DISCOUNT_ID SMALLINT,
SERVICE_ID SMALLINT,
DURATION TINYINT NOT NULL,
TOTAL_PAYMENT DECIMAL(8,2) NOT NULL,
FOREIGN KEY(USER_ID) REFERENCES NONAPORTA.USERS_LOGIN(ID),
FOREIGN KEY(FEE_ID) REFERENCES NONAPORTA.FEE(ID),
FOREIGN KEY(FEE_DISCOUNT_ID) REFERENCES NONAPORTA.FEE_DISCOUNTS(ID),
);

CREATE TABLE IF NOT EXISTS NONAPORTA.PAYMENTS_HISTORY(
ID INT UNSIGNED PRIMARY KEY,
PAYMENT_DATE DATETIME,
END_DATE DATETIME,
USER_ID INT NOT NULL,
FEE_ID SMALLINT,
FEE_DISCOUNT_ID SMALLINT,
SERVICE_ID SMALLINT,
DURATION TINYINT NOT NULL,
TOTAL_PAYMENT DECIMAL(8,2) NOT NULL,
FOREIGN KEY(USER_ID) REFERENCES NONAPORTA.USERS_LOGIN(ID),
FOREIGN KEY(FEE_ID) REFERENCES NONAPORTA.FEE(ID),
FOREIGN KEY(FEE_DISCOUNT_ID) REFERENCES NONAPORTA.FEE_DISCOUNTS(ID),
);

-- AWS S3
-- Storage Class
-- 	Frequent access
--  Standard for infrequent access
--  Amazon Glacier
--  How data is organized ?
--  Bucket (Logical unit of storage)
--   Bucket contains objects which contain data and metadata(name-value pair)
-- https://www.edureka.co/blog/s3-aws-amazon-simple-storage-service/
-- Object locking is not supported in Amazon S3. This means that if our application needs to protect an existing object against modifications from other processes, 
-- we have to implement this functionality in our own application
-- https://www.javacodegeeks.com/2017/03/amazon-s3-tutorial.html#cli_buckets
-- http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html Generate KEYS (Key Name prefixes)
-- http://docs.aws.amazon.com/AmazonS3/latest/dev/ListingKeysHierarchy.html
-- The purpose of the prefix and delimiter parameters is to help you organize and then browse your keys hierarchically.
-- Key Format
-- Delimiter "/"
-- modelId/dataType/year/session/photoId/versionId

CREATE TABLE IF NOT EXISTS NONAPORTA.PHOTOS(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
MODEL INT UNSIGNED,
SESSION SMALLINT NOT NULL,
DATE DATETIME NOT NULL, 
FOREIGN KEY(MODEL) REFERENCES NONAPORTA.MODELS_INFORMATION(ID),
INDEX(MODEL)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.PHOTOS_VERSIONS(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
ORIGINAL INT UNSIGNED,
THEME SMALLINT UNSIGNED,
KEY_PATH VARCHAR(100),
FOREIGN KEY(ORIGINAL) REFERENCES NONAPORTA.PHOTOS(ID)
FOREIGN KEY(THEME) REFERENCES NONAPORTA.THEMES(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.ACTIVE_PHOTOS(
ID INT UNSIGNED PRIMARY KEY,
ORDER TINYINT UNSIGNED NOT NULL,
FOREIGN KEY(ID) REFERENCES NONAPORTA.PHOTO_VERSIONS(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.ACTIVE_PHOTOS_HISTORY(
ID INT UNSIGNED PRIMARY KEY,
ORDER TINYINT,
ACTIVE_DATE DATETIME,
FOREIGN KEY(ID) REFERENCES NONAPORTA.PHOTOS_VERSIONS(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.VIDEOS(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
MODEL INT UNSIGNED,
SESSION SMALLINT UNSIGNED NOT NULL,
DATE DATETIME NOT NULL,
FOREIGN KEY(MODEL) REFERENCES NONAPORTA.MODELS_INFORMATION(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.VIDEOS_VERSIONS(
ID INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
ORIGINAL INT UNSIGNED,
THEME SMALLINT UNSIGNED,
KEY_PATH VARCHAR(100),
FOREIGN KEY(ORIGINAL) REFERENCES NONAPORTA.VIDEOS(ID)
FOREIGN KEY(THEME) REFERENCES NONAPORTA.THEMES(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.ACTIVE_VIDEOS(
ID INT UNSIGNED PRIMARY KEY,
ORDER TINYINT NOT NULL,
FOREIGN KEY(ID) REFERENCES NONAPORTA.VIDEOS_VERSIONS(ID)
);

CREATE TABLE IF NOT EXISTS NONAPORTA.ACTIVE_VIDEOS_HISTORY(
ID INT UNSIGNED PRIMARY KEY,
ORDER TINYINT,
ACTIVE_DATE DATETIME,
FOREIGN KEY(ID) REFERENCES NONAPORTA.VIDEOS_VERSIONS(ID)
);

