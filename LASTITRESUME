MAVEN
	HIERARCHICAL PROJECTS
	MULTI-MODULES PROJECT
	DEPENDENCYMANAGEMENT IS LIKE ENVIRONMENT VARIABLES, IT ALLOWS TO DEFINE DEPENDENCIES THAT CHILD ONLY HAVE TO DEFINE ARTIFACT AND GROUP ID
	RESOURCES FILTERING
	SCOPES -> TEST PROVIDED COMPILE(DEFAULT)
	LIFECYCLE -> PACKAGE VERIFY INSTALL DEPLOY
	ASSEMBLY PLUGIN -> DEFINE CUSTOM ARCHTYPES (DELIVERABLES)
	
SPRING
	XML
	JAVA
	AUTOMATIC
		@Bean
		@Configuration @Import @ImportResource
		@ComponentScan
		@Autowired
		
		Lifecycle
			Instantiate 
			Populate properties
			BeanAwareName
			BeanFactoryAware
			ApplicationContextAware
			BeanPostProcessor
			InitializingBean afterPropertiesSet
			initMethod
			BeanPostProcessor
			
		SCOPES
			SINGLETON
			PROTOTYPE
			SESSION
			REQUEST
			
			To inject Session beans into singleton beans we must use the @Scope(value=WebApplicationContext.SCOPE_SESSION,proxyMode=ScopedProxyMode.INTERFACES)
			INTERFACES are used to inject proxies into the beans!!! If the proxied object is not an interface we must use TARGET_CLASS that uses CGLib!!!
			
		
		ENVIRONMENT BEANS
		@Profile("dev") -> CLASS AND METHOD LEVEL
		Bean without profile are always created!!!
			spring.profiles.active || spring.profiles.default
			To set we can use 
			JNDI entries 
			context parameters 
			servlet DispatchServlet initialization parameters
			environment variables
			JVM system properties
			@ActiveProfiles on an integration test class
			
		CONDITIONAL BEANS
		@Conditional(Conditional interface)
					interface Conditional
						boolean matches(ConditionalContext ctxt,AnnotatedTypeMetadata metadata);
						
		The @Profile annotation is based on @Conditional
		@Retention(RetentionPolicy.RUNTIME)
		@Target({ElementType.TYPE,ElementType.METHOD})
		@Documented
		@Conditional(ProfileCondition.class)
		public @interface Profile{
			String[] value();
		}
		
		AMBIGUITY
			@Primary
			@Qualifier
			We can not use the same annotation on the same item(From Java 8 we can since we use @Repeatable) so we could create our own annotation
			@Target({ElementType.CONSTRUCTOR, ElementType.FIELD,ElementType.METHOD, ElementType.TYPE})
			@Retention(RetentionPolicy.RUNTIME)
			@Qualifier
			public @interface Creamy { }
			
		EXTERNAL VALUES
			@PropertySource("classpath:/com/soundsystem/app.properties")
			@Value("${disc.title}") In order to use placeholders values we must configure PropertySourcesPlaceHolderConfigurer bean because it resolves placeholders against the Spring Environment
			
			@Bean
			public static PropertySourcesPlaceHolderConfigurer ....
			
			If we do not configure this bean we can not use placeholders and must use directly the env.getProperty()
						
		AOP
			Three ways of applying aspects to a target object to create a new PROXIED object :
				Compile
				Class Load Time -> Requires a ClassLoader
				Run Time   -> The Spring way
				
			@EnableAspectJAutoProxy
			
			@Aspect
			public class
			
				@Pointcut("execution(* soundsystem.CompactDisc.playTrack(int)) && args(trackNumber)") -> @args indicate that any int argument passed into the execution of playTrack() should also be passed into
				public void trackPlayed(int trackNumber){}                                                     the advice!!!!
					
				@Before("trackPlayed(trackNumber)")
				public void countTrack(int trackNumber)
					
				@Around
					...(ProceedingJoinPoint jp){
						....
						jp.proceed();
						
			Annotating introductions
					After a class has been compiled,there is little we can do to append new functionality to it.
					SPRING ASPECTS ARE PROXIES THAT IMPLEMENT THE SAME INTERFACE AS THE BEANS THEY WRAP SO IN ADDITION TO IMPLEMENTING THOSE INTERFACES THE PROXY IS ALSO EXPOSED
					THROUGH SOME NEW INTERFACE.
					
					@DeclareParents(value="concert.Performance+",defaultImpl=DefaultEncoreable.class)
					public static Encoreable encoreable;
		
		SPRING WEB
			Basics
				WEB-INF/web.xml
						URLS mapping to servlets
				Thread -> Servlet
				There is one ServletContext by Web Application !!!!!
				Listener -> Objects that receives EVENTS about changes or actions happening in the application.
							For example , javax.servlet.ServletRequestListener receives notification events about requests coming into and going out of scope of a web application.
				Filter	-> Intercepts request and do some pre-processing or intercept the response and do some post-processing.
				Servlet Asynch ->
				Servlet 3.0 container looks for any classes in the classpath that implement the ServletContainerInitializer interface !!!
				Spring supplies an implementation of that interface called SpringServletContainerInitializar that,in turn,seeks out any classes that implement WebApplicationInitializer.
				Spring 3.2 introduced a convenient base implementation of WebApplicationInitializer called AbstractAnnotationConfigDispatcherServletInitializer!!!
				
				TWO APPLICATION CONTEXT
				
				@Override
				protected String[] getServletMappings() {
					return new String[] { "/" };
				}
				
				@Override
				protected Class<?>[] getRootConfigClasses() {
					return new Class<?>[] { RootConfig.class };
				}
				
				@Override
				protected Class<?>[] getServletConfigClasses() {
					return new Class<?>[] { WebConfig.class };
				}
				
				public customizeRegistration(Dynamic registration){
					registration.setMultipartConfig(new MultiConfigElement);
				}
				
				
				@Configuration
				@EnableWebMvc
				@ComponentScan("spitter.web")
				public class WebConfig extends WebMvcConfigurerAdapter{
				
					@Bean
					public ViewResolver viewResolver() {
						InternalResourceViewResolver resolver = new InternalResourceViewResolver();
						resolver.setPrefix("/WEB-INF/views/");
						resolver.setSuffix(".jsp");
						resolver.setExposeContextBeansAsAttributes(true);
						return resolver;
					}
					
					@Override
					public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
						configurer.enable();
					}
				}
				
				@Controller
				@RequestMapping("/spittles")
				@RequestMapping(method=RequestMethod.GET)
				
				QUERY
					@RequestParam(value="max",defaultValue=MAX_LONG_AS_STRING)
				
				PATH
					@RequestMapping(value="/{spittleId}"
					@PathVariable("spittleId")
					
				FORM
					Use Validation API
					@Valid...Errors
					
				HANDLING EXCEPTIONS
					@ResponseStatus(value=HttpStatus.NOT_FOUND,reason="Spittle Not Found")
					public class SpittleNotFoundException extends RuntimeException
					
					@ExceptionHandler(DuplicateSpittleException.class)
					public String handleDuplicateSpittle() {
						return "error/duplicate";
					}
					
					@ControllerAdvice
					public class AppWideExceptionHandler {
						@ExceptionHandler(DuplicateSpittleException.class)
						public String duplicateSpittleHandler() {
							return "error/duplicate";
						}
					}
					
				FLASH ATTRIBUTES
					model.addFlashAttribute
					
					
				SPRING SECURITY
					Extend the class AbstractSecurityWebApplicationInitializer that also implements WebApplicationInitializer so it will be discover by Spring and be used to register
					DELEGATINGFILTERPROXY with the web container.This filter will intercept requests coming into the application and delegate them to a bean whose ID is springSecurityFilterChain
					
					@Configuration
					@EnableWebMvcSecurity  -> handler methods can receive the authenticated user's principal via @AuthenticationPrincipal-annotated parameters.
					                          Adds a CSRF token field on forms using Spring form binding tag library.
					public class SecurityConfig extends WebSecurityConfigurerAdapter
						configure(WebSecurity) Override to configure Spring Security’s filter
						
						configure(HttpSecurity) Override to configure how requests are secured by interceptors.
							protected void configure(HttpSecurity http) throws Exception {
								http.authorizeRequests().antMatchers("/spitters/me").authenticated().antMatchers(HttpMethod.POST, "/spittles").authenticated().anyRequest().permitAll();
							}
							
							USING SPEL -> .antMatchers("/spitter/me").access("hasRole('ROLE_SPITTER') and hasIpAddress('192.168.1.2')")
						
						configure(AuthenticationManagerBuilder) Override to configure user-details services.
						
							protected void configure(AuthenticationManagerBuilder auth) throws Exception {
								auth.userDetailsService(new SpitterUserService(spitterRepository));
							}
						
						
							public interface UserDetailsService {
								UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
							}
							
							
				DataBase
					@Repository
					@PersistenceUnit
					@Transactional
					@PersistenceContext
					
					@Bean
					public PersistenceAnnotationBeanPostProcessor paPostProcessor() {
						return new PersistenceAnnotationBeanPostProcessor();
					}
					
					@PersistenceContext and @PersistenceUnit are not Spring annotation so this post processor bean look for this annotation in order for Spring understand them and inject
					an EntityManagerFactory or EntityManager
					
					@Bean
					public BeanPostProcessor persistenceTranslation() {
						return new PersistenceExceptionTranslationPostProcessor();
					}
					
					This post processor bean looks for classes annotated with @Repository to translate the exceptions into one of Springs unified data-access exceptions.
					
					@EnableJpaRepositories -> scans its base package for any interfaces that extend Spring Data JPA’s Repository interface.
											  When it finds any interface extending Repository, it automatically (at application startup time) generates an implementation of that interface.
					
					public interface SpitterRepository extends JpaRepository<Spitter, Long> {
					}
					
					Spring Data defines mini DSL language
					
					Custom Queries
						@Query
						
						When Spring Data JPA generates the implementation for a repository interface, it also looks for a class whose name is the same as the interface’s name postfixed with Impl.
						
				CACHING		
					@EnableCaching -> create an aspect with pointcuts that trigger off of Spring’s caching annotations.
					
					@Bean
					public CacheManager cacheManager()
					
					@Cacheable
					@CachePut
					@CacheEvict
					@Caching
					
				SECURING METHODS
					@EnableGlobalMethodSecurity(securedEnabled=true)
					public class MethodSecurityConfig extends GlobalMethodSecurityConfiguration
					
					@Secured({"ROLE_SPITTER", "ROLE_ADMIN"})
					@PreAuthorize
					@PostAuthorize
					@PostFilter
					@PreFilter
					
				WEBSERVICES
					@WebService extends SpringBeanAutowiringSupport -> Enable autowiring
					@WebMethod
					
				REST
					Two options to transform a resource Java representation into representation that is shipped to the client
						CONTENT NEGOTIATION -> A view is selected that can render the model into a representation to be served to the client
							Not only does the view need to match the view name but the view also needs to be chosen to suit the client.
								1)Look to URL file extension
								2)Look to Accept header
								3)The look for a View through the view name
						
						@Override
						public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
							configurer.defaultContentType(MediaType.APPLICATION_JSON);
						}
						
						@Bean
						public ViewResolver cnViewResolver(ContentNegotiationManager cnm) {
							ContentNegotiatingViewResolver cnvr = new ContentNegotiatingViewResolver();
							cnvr.setContentNegotiationManager(cnm);
							return cnvr;
						}
						
						
						MESSAGE CONVERSION  -> A message converter transforms an object returned from the controller into a representation to be served to the client
							Marshall and UnMarchall the data to the request type from and to the @Controller
							When using message conversion, DispatcherServlet doesn’t bother with ferrying model data to a view. 
							In fact, there is no model, and there is no view. There is only data produced by the controller and a resource representation produced when a message converter transforms that data
							
							Request header Accept indicate that accept application/json and if the Jackson JSON library is on the classpath , the object returned from the handler method is given to 
							MappingJacksonHttpMessagerConverter.
							
							@RequestMapping(method=RequestMethod.POST,produces="application/json")
							public @ResponseBody Spittle saveSpittle(@RequestBody Spittle spittle) {
								return spittleRepository.save(spittle);
							}
							
							@RestController
							ResponseEntity
							@ExceptionHandler(SpittleNotFoundException.class)
							Error
							
		
				WEBSOCKETS
					@EnableWebSocket
					public class WebSocketConfig implements WebSocketConfigurer {
						
						@Override
						public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
							registry.addHandler(marcoHandler(), "/marco");
						}
						
						@Bean
						public MarcoHandler marcoHandler() {
							return new MarcoHandler();
						}
					}
					
					STOMP
						Configure a broker (like JMS or AMQP)
					
					
		GENERICS
		JAVA 8 FEATURES
			Functional interfaces
			Lambda Expressions
			Method Reference
			Default Methods
			Stream API
			Optional interface
		JAVASCRIPT
			<script> tag can be inline or external
			The html is not displayed until all the the code inside script is evaluated and downloaded!!!
			Best practice is to put in the bottom of the <body> element and use defer or async attribute!!!
			Verify if they are executed before or after the page LOAD event and DOMContentLoaded!!
			
			var set the variable into the scope where it was defined
			without "var" the variable is set the GLOBAL scope!!!
			
			6 PRIMITIVE TYPES
				UNDEFINED,NULL,STRING,NUMBER,BOOLEAN,SYMBOL(unique value that is not equal to any other value)
				ALL IMMUTABLE
			1 COMPLEX
				OBJECT(Unorder list of name-value paisr)
				
			typeof operator !!!!Because loosely type there is a need to determine  the data type
			
			Functions does not care how many arguments are passed in.Arguments in JS are represented has an internal array!!!The array is always passed to the function!!!
			To access this array there is the arguments array like property!!!
			arguments values are in SYNC with the named parameters !!!
			
			instanceof operator
			
			EXECUTION CONTEXT
				Scope Chain of variable objects , the front of this scope chain is always the VARIABLE OBJECT!!!
				If the context is a function then the VARIABLE object is the ACTIVATION OBJECT that starts with the arguments variable!!!
				IDENTIFIERS ARE RESOLVED BY NAVIGATING THE SCOPE CHAIN!!!
				
				Identifier lookup is taken in scope chain and in PROTOTYPE CHAIN in the object cases!!!
				
			Functions are OBJECTS , they are instance of the Function type.
				function sum (num1, num2) {
					return num1 + num2;
				}
				
				var sum = function(num1, num2){
							return num1 + num2;
				};
				
				var sum = new Function("num1", "num2", "return num1 + num2");
				
				Function declaration hoisting!!!!
				TWO SPECIAL OBJECTS EXIST INSIDE A FUNCTION
					ARGUMENTS AND THIS!!!
					
					arguments.callee points to the function that owns the array like arguments!!!
					THIS -> Reference to the context object that the function is operating on!!!
					caller -> Reference to the function that called this function
					
				FUNCTION PROPERTIES
					LENGTH and PROTOTYPE
					apply() and call() and bin-> Change the this inside the function.
					
					Code executed in the eval() function is considered to be part of the execution context in which the call is made!!!
					
					Data properties
						[[Configurable]] , [[Enumerable]] , [[Writable]] , [[Value]]
						Object.defineProperty(person, "name", {
							writable: false,
							value: "Nicholas"
							});
					Accesor properties
						[[Configurable]] , [[Enumerable]] ,[[Get]],[[Set]]
						
					Object.getOwnPropertyDescriptor()

				OBJECT CREATION
					FACTORY PATTERN
						function createPerson(name,age){
							var x = new Object();
							x.name = name;
							x.age = age;
							x.sayName = function(){
								return this.name;
							}
							return x;
						}
						
					CONSTRUCTOR PATTERN
						function createPerson(name,age){
							this.name = name;
							this.age = age;
							this.sayName = function(){
								return this.name;
							}
							return x;
						}
						
					TO BE USED : CREATE A NEW OBJECT / ASSGN THE THIS VALUE OF THE CONSTRUCTOR TO THE NEW OBJECT(SO THIS POINTS TO THE NEW OBJECT) / EXECUTE THE CODE INSIDE THE FUNCTION / RETURN THE NEW OBJECT

					PROTOTYPE PATTERN
					CONSTRUCTOR/PROTOTYPE PATTERN
						function Person(name, age, job){
							this.name = name;
							this.age = age;
							this.job = job;
							this.friends = [“Shelby”, “Court”];
						}
							
							Person.prototype = {
								constructor: Person,
								sayName : function () {
								alert(this.name);
							}
							};
					PARASITIC CONSTRUCTOR
					DURABLE CONSTRUCTOR PATTERN
					
					INHERITANCE
						PROTOTYPE CHAINING
							
			
			
			MODULES
		ANGULAR
		JPA
		REACT
		GIT
		DOCKER
		SERVLESS FUNCTIONS
					
				
					
			
			
		
	
	
